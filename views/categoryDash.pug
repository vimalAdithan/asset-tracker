doctype html
html
  head
    title Asset Tracker - Dashboard
    link(rel="stylesheet", href="/styles.css")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.4/dist/css/bootstrap.min.css" integrity="sha384-DQvkBjpPgn7RC31MCQoOeC9TI2kdqa4+BSgNMNj8v77fdC77Kj5zpWFTJaaAoMbC" crossorigin="anonymous")
    script(src="https://cdn.jsdelivr.net/npm/jwt-decode@3.1.2/build/jwt-decode.min.js")

  body
    nav.navbar.navbar-expand-lg.bg-body-tertiary
      .container-fluid
        a.navbar-brand(href="") Category Dashboard
        button.navbar-toggler(type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation")
          span.navbar-toggler-icon
        .collapse.navbar-collapse#navbarNavAltMarkup
          .navbar-nav
            a.nav-link(href="" onclick="event.preventDefault(); localStorage.clear(); window.location.href='/login';") Logout
    main.container.mt-4
      div#addCategoryModal.modal.fade(tabindex="-1")
        .modal-dialog
          .modal-content
            .modal-header
              h5.modal-title Add New Category
              button.btn-close(type="button", data-bs-dismiss="modal")
            .modal-body
              form#addCategoryForm
                .mb-3
                  label.form-label(for="newCategory") Category Name
                  input.form-control(type="text", id="newCategory", required)
                button.btn.btn-primary(type="submit") Add
      .d-flex.justify-content-between.align-items-center.mb-3.employee-actions
        button.btn.btn-primary(data-bs-toggle="modal", data-bs-target="#addCategoryModal") Add Category
        .d-flex.align-items-center.gap-2.flex-nowrap
          input#assetSearch.form-control(type="text", placeholder="Search make/model...", style="width: 250px;")
          select#typeFilter.form-select
          button(type="button")#searchBtn.btn.btn-outline-secondary Search
      .asset-list
        .table-responsive
          table#assetTable.table.table-hover.table-bordered.align-middle.text-center
            thead.table-light
              tr
                th Make
                th Model
                th Description
                th Serial No.
                th Category
            tbody

    script.
      var token = localStorage.getItem('token');
      if (!token) {
        alert("Authentication token not found. Please log in.")
        window.location.href = '/';
      }else{
        if(jwt_decode(token)?.role !== "category"){
          alert("Authentication token not found. Please log in.")
          window.location.href = '/';
        }
      }

    script.
      let categories = [];
      async function fetchCategories() {
        const res = await fetch('/api/category-list', {
          headers: { 'Authorization': token }
        });
        const result = await res.json();
        categories = result.value || [];

        const typeFilter = document.getElementById("typeFilter");
        typeFilter.innerHTML = `<option value="all" selected>All Categories</option>` + 
          categories.map(cat => `<option class="text-capitalize" value="${cat}">${cat}</option>`).join('')+`<option value="OTHER">OTHER</option>`
        fetchAssets();
      }
      fetchCategories()


      document.getElementById("addCategoryForm").addEventListener("submit", async function(e) {
        e.preventDefault();
        const newCategory = document.getElementById("newCategory").value.trim();
        if (!newCategory) return alert("Category cannot be empty");

        const submitBtn = this.querySelector("button[type='submit']");
        const originalText = submitBtn.innerHTML;

        submitBtn.disabled = true;
        submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Adding...`;


        try {
          const res = await fetch('/api/add-category', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': token
            },
            body: JSON.stringify({ name: newCategory })
          });
          const result = await res.json();
          if (result.code === 200) {
            alert("Category added!");
            document.getElementById("newCategory").value = '';
            bootstrap.Modal.getInstance(document.getElementById('addCategoryModal')).hide();
            await fetchCategories();  // Refresh categories
          } else {
            alert(result.msg || "Failed to add category.");
          }
        } catch (err) {
          console.error(err);
          alert("Error adding category.");
        }finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalText;
        }
      });

      const assetSearch = document.getElementById("assetSearch");
      const searchBtn = document.getElementById("searchBtn");

      async function fetchAssets() {
        const response = await fetch('/api/category-assets', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': token
          }
        });
        const result = await response.json();
        const assets=result.value
        const searchQuery = assetSearch.value.trim().toLowerCase();
        const selectedType = typeFilter.value.trim().toLowerCase();

        const tbody = document.querySelector("#assetTable tbody");
        tbody.innerHTML = '';

        const filtered = assets.filter(asset => {
          const matchesSearch = asset.make.toLowerCase().includes(searchQuery) || asset.model.toLowerCase().includes(searchQuery);
          const matchesType = selectedType === 'all' || asset.category?.toLowerCase() === selectedType;
          return matchesSearch && matchesType;
        });

        if (filtered.length === 0) {
          tbody.innerHTML = `<tr><td colspan="7">No assets found.</td></tr>`;
          return;
        }

        filtered.forEach(asset => {
          const row = document.createElement('tr');
          const categoryOptions = categories.map(cat => 
            `<option value="${cat}" ${asset.category === cat ? "selected" : ""}>${cat}</option>`
          ).join('')+`<option ${asset.category === "OTHER" ? "selected" : ""} disabled>OTHER</option>`;

          row.innerHTML = `
            <td>${asset.make}</td>
            <td>${asset.model}</td>
            <td>${asset.description}</td>
            <td>${asset.serialNo}</td>
            <td>
            <select class="form-select form-select-sm category-select" onchange="updateCategory('${asset.id}', this)">
              ${categoryOptions}
            </select>
            </td>`;
          tbody.appendChild(row);
        });
      }


      searchBtn.addEventListener("click", fetchAssets);
      typeFilter.addEventListener("change", fetchAssets);

      async function updateCategory(assetId, selectElement) {
        const newCategory = selectElement.value;
        selectElement.disabled = true;

        try {
          const res = await fetch('/api/update-category', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': token
            },
            body: JSON.stringify({ assetId, newCategory })
          });

          const result = await res.json();
          if (result.code === 200) {
            alert("Category updated.");
          } else {
            alert(result.msg || "Failed to update.");
          }
        } catch (err) {
          console.error(err);
          alert("Error updating category.");
        } finally {
          selectElement.disabled = false;
        }
      }


    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.4/dist/js/bootstrap.bundle.min.js" integrity="sha384-YUe2LzesAfftltw+PEaao2tjU/QATaW/rOitAq67e0CT0Zi2VVRL0oC4+gAaeBKu" crossorigin="anonymous")
